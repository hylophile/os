name: build-image
on: push
#  schedule:
#    - cron: "0 0 * * *" # every day at midnight

env:
  IMAGE_NAME: os
  IMAGE_TAGS: 38 latest ${{ github.sha }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}

jobs:
  check_versions:
    name: Compare Sericea version
    runs-on: ubuntu-22.04

    outputs:
      previous_digest: ${{ steps.compare_digests.outputs.previous }}
      current_digest: ${{ steps.compare_digests.outputs.current }}

    steps:
      # Checkout push-to-registry action github repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      # Download last Sericea digest
      - name: Get previous digest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: echo $(gh run download -n digest)

      # Compare digests
      - name: Compare digests
        id: compare_digests
        run: |
          export DIGEST=$(skopeo inspect  --format "{{.Digest}}" docker://quay.io/fedora-ostree-desktops/sericea:39)
          echo "previous=$(< digest.txt)" >> "$GITHUB_OUTPUT"
          echo "current=$DIGEST" >> "$GITHUB_OUTPUT"
          echo $DIGEST > digest.txt

      # Update new Sericea digest
      - name: Update new digest
        uses: actions/upload-artifact@v3
        with:
          name: digest
          path: digest.txt

      # Print hashes (to verify if a build should occur)
      - name: Echo digest hashes
        run: |
          echo "${{ toJSON(steps.compare_digests.outputs) }}"

  push-ghcr:
    name: Build image
    needs: check_versions
    if: ${{ github.event_name != 'schedule' || needs.check_versions.outputs.previous_digest != needs.check_versions.outputs.current_digest }}
    runs-on: ubuntu-22.04

    steps:
      # Checkout push-to-registry action github repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      # Build image using Buildah action
      - name: Build Image
        uses: redhat-actions/buildah-build@v2
        id: build_image
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          oci: true

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

  release_iso:
    name: Build ISO
    needs: check_versions
    if: ${{ github.event_name != 'schedule' || needs.check_versions.outputs.previous_digest != needs.check_versions.outputs.current_digest }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    container:
      image: fedora:38
      options: --privileged

    outputs:
      previous_digest: ${{ steps.compare_digests.outputs.previous }}
      current_digest: ${{ steps.compare_digests.outputs.current }}

    steps:
      # Checkout push-to-registry action github repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      # Install missing dependencies needed later
      - name: Add missing dependencies
        run: |
          sudo dnf install 'dnf-command(config-manager)' -y
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf install gh -y

      # Build an ISO (if we need to)
      - name: Generate ISO
        uses: ublue-os/isogenerator@main
        id: isogenerator
        with:
          image-name: lkn-os
          installer-repo: releases
          installer-major-version: 38
          boot-menu-path: boot_menu.yml

      # Upload an ISO (if we need to)
      - name: Upload ISO
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if gh release list -R ${{ github.repository_owner }}/${{ github.event.repository.name }} | grep "latest-iso"; then
            gh release upload latest-iso ${{ steps.isogenerator.outputs.iso-path }} -R ${{ github.repository_owner }}/${{ github.event.repository.name }} --clobber
          else
            gh release create latest-iso ${{ steps.isogenerator.outputs.iso-path }} -t ISO -n "This is an automatically generated ISO release." -R ${{ github.repository_owner }}/${{ github.event.repository.name }}
          fi

      # Upload an SHA (if we need to)
      - name: Upload SHA256SUM
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: gh release upload latest-iso ${{ steps.isogenerator.outputs.sha256sum-path }} -R ${{ github.actor }}/${{ github.event.repository.name }} --clobber
